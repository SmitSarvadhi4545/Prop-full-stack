openapi: 3.0.3
info:
  title: Music Playlist Management System API
  description: |
    A comprehensive API for managing music playlists with Spotify integration.
    
    This API allows users to:
    - Register and authenticate securely
    - Create and manage personal playlists
    - Search for songs using Spotify's extensive catalog
    - Add songs from Spotify to custom playlists
    - Organize and manage their music collection
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. After registering or logging in, 
    include the JWT token in the Authorization header as: `Bearer <token>`
    
    ## Getting Started
    1. Register a new account using `/api/auth/register`
    2. Login to get your JWT token using `/api/auth/login`
    3. Start creating playlists and adding songs!
    
    ## Spotify Integration
    The API integrates with Spotify Web API to provide access to millions of songs.
    Make sure your Spotify API credentials are properly configured on the server.
  version: 1.0.0
  contact:
    name: API Support
    email: support@playlisthub.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://your-production-domain.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              username: johndoe
              email: john@example.com
              password: SecurePass123!
              name: John Doe
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: john@example.com
              password: SecurePass123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Retrieve the profile of the currently authenticated user
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout the current user (client should remove token)
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # Playlist Endpoints
  /playlists:
    get:
      tags:
        - Playlists
      summary: Get user playlists
      description: Retrieve all playlists for the authenticated user with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search query for playlist names or descriptions
      responses:
        '200':
          description: Playlists retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Playlist'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'

    post:
      tags:
        - Playlists
      summary: Create playlist
      description: Create a new playlist for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlaylistRequest'
            example:
              name: My Favorite Songs
              description: A collection of my all-time favorite tracks
      responses:
        '201':
          description: Playlist created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Playlist'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /playlists/{id}:
    get:
      tags:
        - Playlists
      summary: Get playlist by ID
      description: Retrieve a specific playlist with all songs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      responses:
        '200':
          description: Playlist retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Playlist'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Playlists
      summary: Update playlist
      description: Update playlist name and description
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlaylistRequest'
      responses:
        '200':
          description: Playlist updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Playlist'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Playlists
      summary: Delete playlist
      description: Delete a playlist and all its contents
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      responses:
        '200':
          description: Playlist deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /playlists/{id}/songs:
    post:
      tags:
        - Playlists
      summary: Add song to playlist
      description: Add a song to the specified playlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - songId
              properties:
                songId:
                  type: string
                  description: ID of the song to add
            example:
              songId: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Song added to playlist successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Playlist'
        '409':
          description: Song already in playlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /playlists/{id}/songs/{songId}:
    delete:
      tags:
        - Playlists
      summary: Remove song from playlist
      description: Remove a song from the specified playlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Playlist ID
        - in: path
          name: songId
          required: true
          schema:
            type: string
          description: Song ID
      responses:
        '200':
          description: Song removed from playlist successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Playlist'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Song Endpoints
  /songs:
    get:
      tags:
        - Songs
      summary: Get all songs
      description: Retrieve all songs with pagination and search
      security: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: search
          schema:
            type: string
          description: Search in song name, artist, or album
      responses:
        '200':
          description: Songs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Song'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'

    post:
      tags:
        - Songs
      summary: Create song
      description: Add a new song to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSongRequest'
      responses:
        '201':
          description: Song created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Song'

  /songs/popular:
    get:
      tags:
        - Songs
      summary: Get popular songs
      description: Retrieve the most popular songs (used in most playlists)
      security: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Popular songs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Song'
                            - type: object
                              properties:
                                playlistCount:
                                  type: integer
                                  description: Number of playlists containing this song

  # Spotify Integration Endpoints
  /spotify/search:
    get:
      tags:
        - Spotify Integration
      summary: Search Spotify tracks
      description: Search for tracks on Spotify
      security: []
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
          description: Search query
          example: "blinding lights weeknd"
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SpotifyTrack'
                      pagination:
                        $ref: '#/components/schemas/PaginationInfo'
        '400':
          description: Invalid search query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /spotify/track/{id}:
    get:
      tags:
        - Spotify Integration
      summary: Get Spotify track details
      description: Get detailed information about a specific Spotify track
      security: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Spotify track ID
          example: "4uLU6hMCjMI75M1A2tKUQC"
      responses:
        '200':
          description: Track details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SpotifyTrack'
        '404':
          description: Track not found on Spotify
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /spotify/add-track:
    post:
      tags:
        - Spotify Integration
      summary: Add Spotify track to database
      description: Add a track from Spotify to the local database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spotifyId
              properties:
                spotifyId:
                  type: string
                  description: Spotify track ID
              example:
                spotifyId: "4uLU6hMCjMI75M1A2tKUQC"
      responses:
        '201':
          description: Track added to database successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Song'
        '200':
          description: Track already exists in database
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Song'

  /spotify/status:
    get:
      tags:
        - Spotify Integration
      summary: Get Spotify API status
      description: Check Spotify API configuration and connectivity
      security: []
      responses:
        '200':
          description: Spotify status retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          isConfigured:
                            type: boolean
                          hasClientId:
                            type: boolean
                          hasClientSecret:
                            type: boolean
                          apiAccessible:
                            type: boolean

  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: API health check
      description: Check if the API is running and healthy
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Music Playlist Management API is running"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your JWT token

  schemas:
    # User Schemas
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        username:
          type: string
          description: Unique username
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        _id: "507f1f77bcf86cd799439011"
        username: "johndoe"
        email: "john@example.com"
        name: "John Doe"
        createdAt: "2023-01-01T00:00:00.000Z"
        updatedAt: "2023-01-01T00:00:00.000Z"

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - name
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: Must contain uppercase, lowercase, number, and special character
        name:
          type: string
          minLength: 1
          maxLength: 100

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                token:
                  type: string
                  description: JWT token for authentication

    # Playlist Schemas
    Playlist:
      type: object
      properties:
        _id:
          type: string
          description: Playlist ID
        name:
          type: string
          description: Playlist name
        description:
          type: string
          description: Playlist description
        owner:
          $ref: '#/components/schemas/User'
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        _id: "507f1f77bcf86cd799439012"
        name: "My Favorite Songs"
        description: "A collection of my all-time favorites"
        owner:
          _id: "507f1f77bcf86cd799439011"
          name: "John Doe"
          username: "johndoe"
        songs: []
        createdAt: "2023-01-01T00:00:00.000Z"
        updatedAt: "2023-01-01T00:00:00.000Z"

    CreatePlaylistRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    UpdatePlaylistRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    # Song Schemas
    Song:
      type: object
      properties:
        _id:
          type: string
          description: Song ID
        spotifyId:
          type: string
          description: Spotify track ID
        name:
          type: string
          description: Song title
        artist:
          type: string
          description: Artist name(s)
        album:
          type: string
          description: Album name
        duration:
          type: integer
          description: Duration in milliseconds
        imageUrl:
          type: string
          format: uri
          description: Album cover image URL
        previewUrl:
          type: string
          format: uri
          description: 30-second preview URL
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        _id: "507f1f77bcf86cd799439013"
        spotifyId: "4uLU6hMCjMI75M1A2tKUQC"
        name: "Blinding Lights"
        artist: "The Weeknd"
        album: "After Hours"
        duration: 200040
        imageUrl: "https://i.scdn.co/image/ab67616d0000b2738863bc11d2aa12b54f5aeb36"
        previewUrl: "https://p.scdn.co/mp3-preview/..."
        createdAt: "2023-01-01T00:00:00.000Z"
        updatedAt: "2023-01-01T00:00:00.000Z"

    CreateSongRequest:
      type: object
      required:
        - spotifyId
        - name
        - artist
        - album
        - duration
      properties:
        spotifyId:
          type: string
          minLength: 22
          maxLength: 22
        name:
          type: string
          minLength: 1
          maxLength: 200
        artist:
          type: string
          minLength: 1
          maxLength: 200
        album:
          type: string
          minLength: 1
          maxLength: 200
        duration:
          type: integer
          minimum: 1000
          maximum: 3600000
        imageUrl:
          type: string
          format: uri
        previewUrl:
          type: string
          format: uri

    # Spotify Schemas
    SpotifyTrack:
      type: object
      properties:
        id:
          type: string
          description: Spotify track ID
        name:
          type: string
          description: Track name
        artists:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
        album:
          type: object
          properties:
            name:
              type: string
            images:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  height:
                    type: integer
                  width:
                    type: integer
        duration_ms:
          type: integer
          description: Duration in milliseconds
        preview_url:
          type: string
          format: uri
          nullable: true
          description: 30-second preview URL
      example:
        id: "4uLU6hMCjMI75M1A2tKUQC"
        name: "Blinding Lights"
        artists:
          - name: "The Weeknd"
        album:
          name: "After Hours"
          images:
            - url: "https://i.scdn.co/image/ab67616d0000b2738863bc11d2aa12b54f5aeb36"
              height: 640
              width: 640
        duration_ms: 200040
        preview_url: "https://p.scdn.co/mp3-preview/..."

    # Common Response Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
        details:
          type: array
          items:
            type: object
          description: Detailed validation errors (if applicable)

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages
      example:
        page: 1
        limit: 20
        total: 100
        totalPages: 5

  responses:
    UnauthorizedError:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Authentication required"

    BadRequestError:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Invalid input data"
            details:
              - field: "email"
                message: "Invalid email format"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"

tags:
  - name: Authentication
    description: User registration, login, and profile management
  - name: Playlists
    description: Create and manage music playlists
  - name: Songs
    description: Song database management and retrieval
  - name: Spotify Integration
    description: Search and import songs from Spotify
  - name: Health
    description: API health and status checks
